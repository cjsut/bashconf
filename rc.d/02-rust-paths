# -*- shell-script -*-

# Location to look for the top-level directory from the Rust nightly tarball.
RUST_DIR=~/misc/apps/rust

if test -d "${RUST_DIR}" -o -h "${RUST_DIR}"; then
    RUST_BIN_DIR="${RUST_DIR}/bin"
    RUST_LIB_DIR="${RUST_DIR}/lib"
    # Apparently Info thinks MANPATH, when set, has to include default (system)
    # directories as well. :(
    #RUST_MAN_DIR="${RUST_DIR}/share/man"

    if test -d "${RUST_BIN_DIR}" -o -h "${RUST_BIN_DIR}"; then
        bashconf-add-paths "${RUST_BIN_DIR}"

        # If Rust is using its own library directory, add an alias for each
        # Rust executable that sets LD_LIBRARY_PATH to that directory.
        if test -d "${RUST_LIB_DIR}" -o -h "${RUST_LIB_DIR}"; then
            for RUST_BINARY in $(find "${RUST_BIN_DIR}" -type f -executable); do
                RUST_BINARY="$(basename "${RUST_BINARY}")"
                eval "alias ${RUST_BINARY}='LD_LIBRARY_PATH="${RUST_LIB_DIR}" ${RUST_BINARY}'"
            done
        fi

        # Add the Rust manpages directory if present.
        if test -d "${RUST_MAN_DIR}" -o -h "${RUST_MAN_DIR}"; then
            if test -n "${MANPATH}"; then
                export MANPATH="${RUST_MAN_DIR}"
            else
                export MANPATH="${RUST_MAN_DIR}:${MANPATH}"
            fi
        fi
    fi
fi


# Remove all functions/variables from this script.
bashconf-cleanup rust
