# -*- shell-script -*-
# Utility functions for use in shell scripts.

if test -z "$BASHCONF_LOG_LEVEL"; then
    # Minimum message severity required for a message to be printed.
    BASHCONF_LOG_LEVEL=info
fi

# Mapping from log-level names to numerical priorities.
declare -A BASHCONF_LOG_PRIORITIES='([error]=9 [warning]=6 [info]=3 [debug]=0)'

## Determine if the priority of the current logging level is greater
# than or equal to the priority of the named logging level.
#
# Returns 0 if priority($BASHCONF_LOG_LEVEL) <= priority($LEVEL) --
# i.e. the threshold priority is below the priority of the given level
# name -- and non-zero otherwise.
#
# Usage: bashconf-log-level-at-least LEVEL
bashconf-log-level-at-least()
{
    test ${BASHCONF_LOG_PRIORITIES[$BASHCONF_LOG_LEVEL]} -le ${BASHCONF_LOG_PRIORITIES[$1]}
}

## Generate a redirect string for use in reporting errors and the
#  like.  If no suitable stderr file can be found, returns (prints) an
#  empty string.
#
# The redirection operator needs to be included in the output to
# handle the case that we can't figure out where stderr is (so we can
# disable redirection altogether).
bashconf-get-stderr-redirect()
{

    # All of these are symlinks, actually. On my system:
    # /dev/stderr       -> /dev/fd/2
    # /dev/fd           -> /proc/self/fd
    # /proc/self/fd/2   -> (terminal device, probably the same as the
    #                       output of the `tty' command.)
    #
    # But I prefer to use the most symbolic one available, because
    # /dev/stderr makes more sense than something with numbers in
    # it. ;)
    for f in '/dev/stderr' '/dev/fd/2' '/proc/self/fd/2'; do
        # Use the first one that looks like a character special
        # device.
        if test -c "$f" ; then
            echo "> $f"
            return
        fi
    done
}

## Report a diagnostic message to the user via stderr.
#
# If DETAIL is given, it will be placed below the initial error
# message.  DETAIL will be automatically reformatted using fmt from
# coreutils.
#
# Usage: bashconf-report-oops TYPE MESSAGE [DETAIL] [RETURN-CODE]
#
# Output is in the form below.
#
# *** TYPE: MESSAGE
# DETAIL
bashconf-report-oops()
{
    if bashconf-log-level-at-least "${1,,?}"; then
        local STR="*** $1: $2" \
              RETCODE=1
        test $# -ge 4 && RETCODE=$4

        # If DETAIL is given, append it to the output string after piping
        # it through fmt.
        if test x"$3" != x ; then
            STR="$STR\n$(echo '$3' | fmt)"
        fi

        # Output the message.
        #
        # To redirect using the computed redirection string (possibly
        # empty), we (unfortunately) need to use eval.
        #
        # FIXME: Are there any nasty security implications here?
        #
        # N.B. the use of proper shell quoting for eval.
        eval echo -e "\"$STR\"" `bashconf-get-stderr-redirect`
    fi
    return $RETCODE
}

## Report an error using bashconf-report-oops.
#
# Usage: bashconf-report-error MESSAGE [DETAIL]
bashconf-report-error()
{
    bashconf-report-oops ERROR "$@"
}

## Report a warning using bashconf-report-oops.
#
# Usage: bashconf-report-warning MESSAGE [DETAIL]
bashconf-report-warning()
{
    bashconf-report-oops WARNING "$@"
}

## Report non-critical information using bashconf-report-oops.
#
# Usage: bashconf-report-info MESSAGE [DETAIL]
bashconf-report-info()
{
    bashconf-report-oops INFO "$@"
}


## Print some debug information using bashconf-report-oops.
#
# Usage: bashconf-report-debug MESSAGE [DETAIL]
bashconf-report-debug()
{
    bashconf-report-oops DEBUG "$@"
}


## Report an error and kill the script.
#
# Same syntax as bashconf-report-error.  Use this to avoid snafus when
# a critical item fails and you wish to abort the script.
bashconf-die-error()
{
    bashconf-report-error "$@"
    exit 1
}
